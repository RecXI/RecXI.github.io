<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RecXI个人博客</title>
  <subtitle>面向显示屏编程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-29T06:13:11.335Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RecXI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH远程连接本地虚拟机(三)：远程上传或下载文件</title>
    <link href="http://yoursite.com/2017/08/27/SSH%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%B8%89-%EF%BC%9A%E8%BF%9C%E7%A8%8B%E4%B8%8A%E4%BC%A0%E6%88%96%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/08/27/SSH远程连接本地虚拟机-三-：远程上传或下载文件/</id>
    <published>2017-08-27T14:11:03.000Z</published>
    <updated>2017-08-29T06:13:11.335Z</updated>
    
    <content type="html"><![CDATA[<p>远程登录以后，你就可以”为所欲为”了，这里介绍一个最常用的场景：<br><strong>本地与虚拟机互传文件</strong><br>方法有很多，这里介绍三个：</p>
<ul>
<li>Xftp </li>
<li>lrzsz </li>
<li>scp</li>
</ul>
<hr>
<h2 id="Xftp的使用"><a href="#Xftp的使用" class="headerlink" title="Xftp的使用"></a>Xftp的使用</h2><p>这个主要是配合Xshell<br>同时下载Xshell和Xftp，Ctrl+Alt+F就可以选择文件的互传<br>【注】虚拟机/云服务器通用–只要相互间能ping得通。<br><a id="more"></a></p>
<hr>
<h2 id="lrzsz的使用"><a href="#lrzsz的使用" class="headerlink" title="lrzsz的使用"></a>lrzsz的使用</h2><p>先安装：<br><code>sudo apt-get install lrzsz</code><br>安装之后，便可以使用rz和sz指令：<br><code>sz 【file】 ---&gt;可将服务器的文件下载到本地</code><br><code>rz 【file】 ---&gt;可将本地的文件上传到服务器</code></p>
<hr>
<h2 id="scp的使用"><a href="#scp的使用" class="headerlink" title="scp的使用"></a>scp的使用</h2><p>scp是cp指令的远程版本，所以用法类似</p>
<ol>
<li><p>从服务器上下载文件<br><code>scp username@servername:/path/filename /var/www/local_dir（本地目录）</code></p>
</li>
<li><p>上传本地文件到服务器<br><code>scp /path/filename username@servername:/path</code></p>
</li>
<li><p>从服务器下载整个目录<br><code>scp -r username@servername:/var/www/remote_dir/（远程目录）/var/www/local_dir（本地目录）</code></p>
</li>
<li><p>上传目录到服务器<br><code>scp  -r local_dir username@servername:remote_dir</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;远程登录以后，你就可以”为所欲为”了，这里介绍一个最常用的场景：&lt;br&gt;&lt;strong&gt;本地与虚拟机互传文件&lt;/strong&gt;&lt;br&gt;方法有很多，这里介绍三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xftp &lt;/li&gt;
&lt;li&gt;lrzsz &lt;/li&gt;
&lt;li&gt;scp&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Xftp的使用&quot;&gt;&lt;a href=&quot;#Xftp的使用&quot; class=&quot;headerlink&quot; title=&quot;Xftp的使用&quot;&gt;&lt;/a&gt;Xftp的使用&lt;/h2&gt;&lt;p&gt;这个主要是配合Xshell&lt;br&gt;同时下载Xshell和Xftp，Ctrl+Alt+F就可以选择文件的互传&lt;br&gt;【注】虚拟机/云服务器通用–只要相互间能ping得通。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="远程" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程连接本地虚拟机(二)：使用Xshell或者Git Bash</title>
    <link href="http://yoursite.com/2017/08/27/SSH%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%BA%8C-%EF%BC%9A%E4%BD%BF%E7%94%A8Xshell%E6%88%96%E8%80%85Git-Bash/"/>
    <id>http://yoursite.com/2017/08/27/SSH远程连接本地虚拟机-二-：使用Xshell或者Git-Bash/</id>
    <published>2017-08-27T14:09:57.000Z</published>
    <updated>2017-08-29T06:21:59.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Windows要远程连接Linux主机，有两种基本的思路：</p>
<ol>
<li>利用Windows平台下的UNIX模拟环境 + 相应的终端模拟软件（虚拟终端）<br>可选方案包括：<ul>
<li>MinGW + Git Bash</li>
<li>Cygwin + Mintty</li>
</ul>
</li>
<li>直接利用虚拟终端。<br>可选方案包括：<ul>
<li>Xshell</li>
<li>secureCRT</li>
<li>putty</li>
</ul>
</li>
</ol>
<p><strong>本文主要介绍Xshell 与 Git Bash</strong></p>
<hr>
<h2 id="Xshell的使用"><a href="#Xshell的使用" class="headerlink" title="Xshell的使用"></a>Xshell的使用</h2><h3 id="获取虚拟机ip地址"><a href="#获取虚拟机ip地址" class="headerlink" title="获取虚拟机ip地址"></a>获取虚拟机ip地址</h3><p>命令:<br><code>ifconfig</code><br>定位inet addr，拿到ip地址</p>
<h3 id="配置并建立Xshell会话"><a href="#配置并建立Xshell会话" class="headerlink" title="配置并建立Xshell会话"></a>配置并建立Xshell会话</h3><p>主机填入刚才拿到的ip地址<br><img src="/2017/08/27/SSH远程连接本地虚拟机-二-：使用Xshell或者Git-Bash/1.jpg" alt="1"><br>建立用户身份认证：用户名填root，密码填你ubuntu的root登录密码<br><a id="more"></a><br><img src="/2017/08/27/SSH远程连接本地虚拟机-二-：使用Xshell或者Git-Bash/2.jpg" alt="2"><br>连接成功，以后打开该会话会自动连接：<br><img src="/2017/08/27/SSH远程连接本地虚拟机-二-：使用Xshell或者Git-Bash/3.png" alt="3"></p>
<hr>
<h2 id="Git-Bash的使用"><a href="#Git-Bash的使用" class="headerlink" title="Git Bash的使用"></a>Git Bash的使用</h2><p>Git Bash基于MinGW(和Cygwin一样是类Unix环境)<br>主要目的是用于使用Git相关指令，但因为自身运行在类Unix环境上，本身又是Bash Shell，很多Linux的指令都能用（包括ssh）。<br>使用方法就很简单了，就当做是Linux的Bash Shell来用就行了。<br>打开Git Bash，键入命令，输入密码即可登录：<br><code>ssh username@hostname</code><br><strong>其中username填欲登录Linux账号，hostname直接填虚拟机ip就行</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;Windows要远程连接Linux主机，有两种基本的思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用Windows平台下的UNIX模拟环境 + 相应的终端模拟软件（虚拟终端）&lt;br&gt;可选方案包括：&lt;ul&gt;
&lt;li&gt;MinGW + Git Bash&lt;/li&gt;
&lt;li&gt;Cygwin + Mintty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直接利用虚拟终端。&lt;br&gt;可选方案包括：&lt;ul&gt;
&lt;li&gt;Xshell&lt;/li&gt;
&lt;li&gt;secureCRT&lt;/li&gt;
&lt;li&gt;putty&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;本文主要介绍Xshell 与 Git Bash&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Xshell的使用&quot;&gt;&lt;a href=&quot;#Xshell的使用&quot; class=&quot;headerlink&quot; title=&quot;Xshell的使用&quot;&gt;&lt;/a&gt;Xshell的使用&lt;/h2&gt;&lt;h3 id=&quot;获取虚拟机ip地址&quot;&gt;&lt;a href=&quot;#获取虚拟机ip地址&quot; class=&quot;headerlink&quot; title=&quot;获取虚拟机ip地址&quot;&gt;&lt;/a&gt;获取虚拟机ip地址&lt;/h3&gt;&lt;p&gt;命令:&lt;br&gt;&lt;code&gt;ifconfig&lt;/code&gt;&lt;br&gt;定位inet addr，拿到ip地址&lt;/p&gt;
&lt;h3 id=&quot;配置并建立Xshell会话&quot;&gt;&lt;a href=&quot;#配置并建立Xshell会话&quot; class=&quot;headerlink&quot; title=&quot;配置并建立Xshell会话&quot;&gt;&lt;/a&gt;配置并建立Xshell会话&lt;/h3&gt;&lt;p&gt;主机填入刚才拿到的ip地址&lt;br&gt;&lt;img src=&quot;/2017/08/27/SSH远程连接本地虚拟机-二-：使用Xshell或者Git-Bash/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;br&gt;建立用户身份认证：用户名填root，密码填你ubuntu的root登录密码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="远程" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程连接本地虚拟机(一)：配置并开启服务</title>
    <link href="http://yoursite.com/2017/08/27/SSH%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0%E8%99%9A%E6%8B%9F%E6%9C%BA-%E4%B8%80-%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2017/08/27/SSH远程连接本地虚拟机-一-：配置并开启服务/</id>
    <published>2017-08-27T14:01:56.000Z</published>
    <updated>2017-08-29T06:15:45.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环境：</strong><br>本机：Win7 　　虚拟机：Ubuntu 16.04</p>
<hr>
<h2 id="本机启动Telnet服务"><a href="#本机启动Telnet服务" class="headerlink" title="本机启动Telnet服务"></a>本机启动Telnet服务</h2><h3 id="首先打开Telnet功能"><a href="#首先打开Telnet功能" class="headerlink" title="首先打开Telnet功能"></a>首先打开Telnet功能</h3><p>进入控制面板-&gt;程序和功能-&gt;打开或关闭Windows功能<br>选中Telnet服务器、Telnet客户端并打开这两项功能</p>
<h3 id="开启Telnet服务"><a href="#开启Telnet服务" class="headerlink" title="开启Telnet服务"></a>开启Telnet服务</h3><p>命令行下输入：<br><code>net start Telnet</code><br><a id="more"></a></p>
<hr>
<h2 id="虚拟机配置SSH服务"><a href="#虚拟机配置SSH服务" class="headerlink" title="虚拟机配置SSH服务"></a>虚拟机配置SSH服务</h2><h3 id="检查SSH"><a href="#检查SSH" class="headerlink" title="检查SSH"></a>检查SSH</h3><p>bash下输入命令:<br><code>service ssh</code><br>出现unrecongnzed service 说明没有安装配置ssh，需要下载安装</p>
<h3 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h3><p>命令:<br><code>sudo apt-get install ssh</code><br>如果下载失败，则先输入命令：<br><code>sudo apt-get update</code></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>这一步一定要配置，不然你在连远程的时候很可能会出现：<strong>Access denied这个报错，然后无法成功连接</strong><br>进入目录/etc/ssh,编辑文件sshd_config <strong>【注】最好先su到root用户下，不然很有可能没有写入权限</strong><br><img src="/2017/08/27/SSH远程连接本地虚拟机-一-：配置并开启服务/2.jpg" alt="fw"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;环境：&lt;/strong&gt;&lt;br&gt;本机：Win7 　　虚拟机：Ubuntu 16.04&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;本机启动Telnet服务&quot;&gt;&lt;a href=&quot;#本机启动Telnet服务&quot; class=&quot;headerlink&quot; title=&quot;本机启动Telnet服务&quot;&gt;&lt;/a&gt;本机启动Telnet服务&lt;/h2&gt;&lt;h3 id=&quot;首先打开Telnet功能&quot;&gt;&lt;a href=&quot;#首先打开Telnet功能&quot; class=&quot;headerlink&quot; title=&quot;首先打开Telnet功能&quot;&gt;&lt;/a&gt;首先打开Telnet功能&lt;/h3&gt;&lt;p&gt;进入控制面板-&amp;gt;程序和功能-&amp;gt;打开或关闭Windows功能&lt;br&gt;选中Telnet服务器、Telnet客户端并打开这两项功能&lt;/p&gt;
&lt;h3 id=&quot;开启Telnet服务&quot;&gt;&lt;a href=&quot;#开启Telnet服务&quot; class=&quot;headerlink&quot; title=&quot;开启Telnet服务&quot;&gt;&lt;/a&gt;开启Telnet服务&lt;/h3&gt;&lt;p&gt;命令行下输入：&lt;br&gt;&lt;code&gt;net start Telnet&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="远程" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>辨析python3.X中的bytes和str类型</title>
    <link href="http://yoursite.com/2017/08/23/%E8%BE%A8%E6%9E%90python%E4%B8%AD%E7%9A%84bytes%E5%92%8Cstr%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/08/23/辨析python中的bytes和str类型/</id>
    <published>2017-08-23T02:34:47.000Z</published>
    <updated>2017-08-29T06:18:28.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一篇描述该问题的精彩博文：<a href="http://www.cnblogs.com/chownjy/p/6625299.html" target="_blank" rel="external">被引用博文</a></p>
</blockquote>
<p> 下面是一些本人的理解，对这篇博文进行补充</p>
<blockquote>
<p>引用一句话：编码问题号称编程领域的<strong>幽灵</strong>，如果你不弄懂它，它会折磨你一辈子</p>
</blockquote>
<p><strong>【注】</strong>下面的讨论建立在这个前提之上：bytes可解码为文本，非多媒体二进制序列。</p>
<hr>
<h2 id="底层思维和面向对象思维相结合："><a href="#底层思维和面向对象思维相结合：" class="headerlink" title="底层思维和面向对象思维相结合："></a>底层思维和面向对象思维相结合：</h2><p>如果仅仅有<strong>底层思维</strong>（<em>这里指字符编码思维</em>），那么比较容易陷入一个逻辑陷阱：相同字符对应的bytes和str没有区别，因为本质上有着相同的二进制序列。</p>
<p>其实这种理解从编码角度来讲并没有问题，但是这种理解片面了，因为没有加上<strong>面向对象的思维</strong>：<em>对象是数据的容器，不同类型的对象封装着不同的成员变量和成员方法</em>。<br>而bytes和str正是不同类型的对象。无论是str对象还是bytes对象，本身的二进制序列只是封装在容器中的一部分，<em>局部相同不代表整体相同</em><br><a id="more"></a><br>举个例子：”py”，b”py”。假设内部采用的编码集一致，假设都为：0101101010100011，看上去完全一样，但这只是部分相同。</p>
<ul>
<li>“py”是字符串，封装了encode方法，</li>
<li>b”py”是字节序列，封装了decode方法<br>从它两封装着不同的方法就可以看出：他们是不同类型的对象。所以在很多场景下无法兼容，必须转换。</li>
</ul>
<hr>
<h2 id="str和bytes相互转换："><a href="#str和bytes相互转换：" class="headerlink" title="str和bytes相互转换："></a>str和bytes相互转换：</h2><p>理解了差异之后，转换就显得很自然了–无非就是不同类型对象之间的转换<br><em>str转换为bytes的过程称为<strong>编码</strong></em><br><em>bytes转换为str的过程称为<strong>解码/译码</strong></em></p>
<p>转换的方式有两种：</p>
<h3 id="1-对象式的：decode，encode"><a href="#1-对象式的：decode，encode" class="headerlink" title="1.对象式的：decode，encode"></a>1.对象式的：decode，encode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1 = u&quot;中文&quot;</div><div class="line">#将Unicode重新编码为GBK</div><div class="line">b1 = s1.encode(&quot;gbk&quot;)</div><div class="line">s2 = b1.decode(&quot;gbk&quot;)</div></pre></td></tr></table></figure>
<h3 id="2-过程式的：str-byte-encoding-bytes-str-encoding"><a href="#2-过程式的：str-byte-encoding-bytes-str-encoding" class="headerlink" title="2.过程式的：str(byte,encoding=),bytes(str,encoding=)"></a>2.过程式的：str(byte,encoding=),bytes(str,encoding=)</h3><p><em>【注】两个的位置参数都为encoding，并没有decoding</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1 = &quot;中&quot;</div><div class="line">b1 = bytes(s1,encoding=&quot;utf-8&quot;)</div><div class="line">s2 = str(b1,encoding=&quot;utf-8&quot;)</div><div class="line">s1 == s2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一篇描述该问题的精彩博文：&lt;a href=&quot;http://www.cnblogs.com/chownjy/p/6625299.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;被引用博文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 下面是一些本人的理解，对这篇博文进行补充&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用一句话：编码问题号称编程领域的&lt;strong&gt;幽灵&lt;/strong&gt;，如果你不弄懂它，它会折磨你一辈子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;【注】&lt;/strong&gt;下面的讨论建立在这个前提之上：bytes可解码为文本，非多媒体二进制序列。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;底层思维和面向对象思维相结合：&quot;&gt;&lt;a href=&quot;#底层思维和面向对象思维相结合：&quot; class=&quot;headerlink&quot; title=&quot;底层思维和面向对象思维相结合：&quot;&gt;&lt;/a&gt;底层思维和面向对象思维相结合：&lt;/h2&gt;&lt;p&gt;如果仅仅有&lt;strong&gt;底层思维&lt;/strong&gt;（&lt;em&gt;这里指字符编码思维&lt;/em&gt;），那么比较容易陷入一个逻辑陷阱：相同字符对应的bytes和str没有区别，因为本质上有着相同的二进制序列。&lt;/p&gt;
&lt;p&gt;其实这种理解从编码角度来讲并没有问题，但是这种理解片面了，因为没有加上&lt;strong&gt;面向对象的思维&lt;/strong&gt;：&lt;em&gt;对象是数据的容器，不同类型的对象封装着不同的成员变量和成员方法&lt;/em&gt;。&lt;br&gt;而bytes和str正是不同类型的对象。无论是str对象还是bytes对象，本身的二进制序列只是封装在容器中的一部分，&lt;em&gt;局部相同不代表整体相同&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="字符编码问题" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="字符编码" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>指针和引用在语法层面存在的意义</title>
    <link href="http://yoursite.com/2017/08/16/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E5%9C%A8%E8%AF%AD%E6%B3%95%E5%B1%82%E9%9D%A2%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>http://yoursite.com/2017/08/16/指针和引用在语法层面存在的意义/</id>
    <published>2017-08-16T04:20:27.000Z</published>
    <updated>2017-08-29T06:18:44.986Z</updated>
    
    <content type="html"><![CDATA[<p><strong>[注] 这是现阶段的个人理解，不一定准确，将会持续修正</strong></p>
<p>C和C++在语法层面支持甚至依赖于指针，而Java在语法层面却没有指针<br><em>【注】其实Java本质上还是依赖于指针，封装屏蔽了这些底层细节。</em><br>那么抛开底层本质，从语法层面的角度分析：为什么C，C++要依赖指针<em>（C++的引用同理）</em>。<br><a id="more"></a></p>
<hr>
<h2 id="必须手动管理内存的地方"><a href="#必须手动管理内存的地方" class="headerlink" title="必须手动管理内存的地方"></a>必须手动管理内存的地方</h2><p>其实很多教材上也说了：C，C++给了开发者操控逻辑内存的自由，比如动态内存管理。动态申请内存空间这样的操作<strong>必须</strong>用指针<strong>（注意是必须）</strong>。<br>当然，这些必须的东西我们很熟悉，都是固定的语法。但我们更关注指针在必须层面以外的还有什么存在的意义，这才是灵性编程的关键。</p>
<hr>
<h2 id="函数、指针是一家"><a href="#函数、指针是一家" class="headerlink" title="函数、指针是一家"></a>函数、指针是一家</h2><p><em>【注】这是本文更加关注的一个点。</em></p>
<p>C，C++支持面向过程的范式，这样的范式离不开函数。<br>函数是个特殊的盒子，而指针、引用可以解决函数的特殊性带来的问题。</p>
<p>函数的特殊性很多，这里简单举几点，不深究：</p>
<ol>
<li><p>函数被压栈以后是个独立的工作区间，有自己独立的变量空间。局部变量的作用域仅限于对应函数（即使是具有全局生命周期的静态局部变量，作用域同样受限于对应函数）。</p>
</li>
<li><p>函数默认为值传递，其实指针传递也属于值传递（传地址值），而引用传递属于实体传递。<br>值传递和实体传递的区别在于：是否为参数额外开辟了内存空间。<br>在值传递时，形参只是实参的副本。所以想要在函数中访问实参必须通过指针或者引用传递</p>
</li>
<li><p>函数返回值默认为值返回。<br>要想返回实体，必须通过指针或者引用。而且这个返回的实体只能是全局变量，或者静态局部变量。非静态局部变量禁止被返回。</p>
</li>
</ol>
<p>而java是个纯粹的面向对象的语言，OOP用方法代替函数，而且GC的存在让开发者不用手动管理内存，所以在语法层面完全可以扔掉指针。<em>（再次强调抛开底层本质）</em></p>
<p><em>【插曲】初学时可能会疑惑：在Java中如何实现两数交换？</em><br>其实很简单，直接交换不用函数就行了嘛（手动滑稽）。或者你可以用OOP的方式：封装成类，再调用方法实现。</p>
<hr>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>java在语法层面可以完全抛弃指针，不影响任何实现。而C，C++不能：</p>
<ul>
<li>因为它们有很多必须使用指针的地方—比如动态内存管理</li>
<li>另外：它们需要指针来解决函数的特殊性所带来的问题。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;[注] 这是现阶段的个人理解，不一定准确，将会持续修正&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C和C++在语法层面支持甚至依赖于指针，而Java在语法层面却没有指针&lt;br&gt;&lt;em&gt;【注】其实Java本质上还是依赖于指针，封装屏蔽了这些底层细节。&lt;/em&gt;&lt;br&gt;那么抛开底层本质，从语法层面的角度分析：为什么C，C++要依赖指针&lt;em&gt;（C++的引用同理）&lt;/em&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++基础语法" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
